import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.methods import DeleteWebhook
from aiogram.types import Message
import requests

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã
TOKEN = '7596093771:AAEuqTv9cUSuPNXUd_cGbfPsLN8GB-FTtvg'  # ü§ñ –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
AI_TOKEN = 'io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6ImNlNGU1YTJlLTljNTAtNDkyNy04OTY1LTY1OGJhNzI0MzcxZiIsImV4cCI6NDkwMjM1Nzc4N30.EDhzonH1WO5OhDMK_0GVJk6bn-LqK-ISoXetrD0cbtvhnoFSBNjiimBSMDpLUUSyNRumC6SPVsP8Ep8bDBueAg'  # üß† –¢–æ–∫–µ–Ω API –Ω–µ–π—Ä–æ—Å–µ—Ç–∏

url = "https://api.intelligence.io.solutions/api/v1/chat/completions"
headers = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {AI_TOKEN}",
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ—Å—Ç–∞—è "–ø–∞–º—è—Ç—å")
user_sessions = {}

logging.basicConfig(level=logging.INFO)
bot = Bot(TOKEN)
dp = Dispatcher()

# üü¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_sessions[message.from_user.id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    await message.answer('üëã –∞–ª–∞—Ö –∞–∫–±–∞—Ä —è –±–æ—Ç —Å –∏–∏ —É–º–µ—é –ø–∏–∑–¥–∏—Ç—å —Ü–µ–ø–∫–æ–º –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã ', parse_mode='HTML')

# üîÅ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
@dp.message(lambda message: message.text)
async def handle_text(message: Message):
    user_id = message.from_user.id
    user_history = user_sessions.get(user_id, [])

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_history.append({"role": "user", "content": message.text})
    if len(user_history) > 10:
        user_history = user_history[-10:]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    data = {
        "model": "mistralai/Mistral-Large-Instruct-2411",
        "messages": [
            {"role": "system", "content": "You are a senior AI software engineer and technical assistant. Write clean, professional code, explain clearly, and help with debugging and architecture."}
        ] + user_history,
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        response_json = response.json()

        try:
            text = response_json['choices'][0]['message']['content']
            bot_text = text.split('</think>\n\n')[-1]
        except (KeyError, IndexError):
            bot_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ö—É–π–æ–≤–æ –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–≤ –¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π –º–∏—à–∞ –≤—Å—å–æ —Ö—É–π–Ω—è!."

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_history.append({"role": "assistant", "content": bot_text})
        user_sessions[user_id] = user_history

        await message.answer(bot_text, parse_mode="Markdown")

    except requests.exceptions.RequestException as e:
        logging.error(f"API request failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ö—É–π–æ–≤–æ –æ—à–∏–±–∫–∞ .", parse_mode="Markdown")

# üñºÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@dp.message(lambda message: message.photo)
async def handle_image(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        file_id = message.photo[-1].file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        data = {
            "model": "Qwen/Qwen2-VL-7B-Instruct",  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ –º–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            "messages": [
                {
                    "role": "system",
                    "content": "You are a senior AI software engineer and technical assistant. Analyze images to identify code, mathematical equations, or technical content, and provide detailed descriptions or insights."
                },
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": "Describe this image in detail and provide any technical or visual insights, such as code, equations, or objects write in Ukrainian."
                        },
                        {
                            "type": "image_url",
                            "image_url": {"url": file_url}
                        }
                    ]
                }
            ]
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        response = requests.post(url, headers=headers, json=data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        response.raise_for_status()
        response_json = response.json()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        try:
            text = response_json['choices'][0]['message']['content']
        except (KeyError, IndexError):
            text = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

        await message.answer(text, parse_mode="Markdown")

    except requests.exceptions.RequestException as e:
        logging.error(f"API request failed: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ö—É–π–æ–≥–æ —Å—Ñ–æ—Ç–∫–∞–≤ —Å–∞–Ω–µ—á–∫–∞ –ø–µ—Ä–µ—Å–Ω–∏–º–∞–π.", parse_mode="Markdown")
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∏–∞ –∏–∞ –ø–∏–∑–¥–µ—Ü –∑–∞–µ–±–∞–≤ –æ—à—ã–±–∫–∞ –∏–∞.", parse_mode="Markdown")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
